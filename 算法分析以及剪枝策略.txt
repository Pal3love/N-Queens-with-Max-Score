先穷举再找max分的策略，复杂度是O(C(n, p)*p!)；先凑分再找是否存在一个解的策略，复杂度是O((2^k)*(p!))，n是grid size，p是警察，k是scooter格子数。第一种策略的好处是不受scooter数量的影响，200000个scooters跟2个scooters没有区别，但坏处是受到n和p关系的影响，p越接近n的一半，C(n, p)越大，搜索就会奇慢；第二种策略的好处是不存在C(n, p)的影响，反而p越少搜索越快，并且由于只需要找到一个nqueen解，实际会比worse case快得多，但代价是会受scooter密度的影响，scooter很多，2^k会极大，第二种策略就爆慢。所以最终的思路是混合两种搜索策略，根据scooter的稀疏度和p/n的百分比来切换最适合的搜索策略。此外，这两种策略中每一步都可以用相同的办法做估分剪枝，虽然剪一刀需要O(n)的时间，但考虑到n在整个问题里可视为<100的常数，如果O(n)的剪枝能换来干掉1000n甚至10000n个node的时候，这个trade off是很值的。
